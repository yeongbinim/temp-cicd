# 워크플로우의 이름을 지정하여, 실행 목록에서 어떻게 표시될지 나타냄
name: CI and CD

# 어떤 이벤트 발생시, 워크플로우가 트리거되는지 지정. (branches: [main, dev]로 적어도 됨)
on:
  push:
    branches: main
# 워크플로우의 단계들을 지정, 서로 종속성 없으면 병렬 수행하나, depends로 차례대로 실행 가능
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'gradle'
      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build -x test --no-daemon
      - name: Rename JAR file to standard name
        run: mv build/libs/*.jar build/libs/spring-boot-app.jar
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: build/libs/spring-boot-app.jar
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app
          path: build/libs
      - name: Create .env File
        run: |
          echo "APP_NAME=spring-boot-app.jar" > .env
          echo "APP_DIR=/home/ubuntu/app" >> .env
          echo "LOG_FILE=/home/ubuntu/app/app.log" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
      - name: Copy JAR and .env to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/spring-boot-app.jar,.env"
          target: "/home/ubuntu/app/"
          overwrite: true
      - name: Run Deployment Script on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            chmod +x /home/ubuntu/app/deploy.sh
            /home/ubuntu/app/deploy.sh
